{"Name":"Login Screen","Id":422,"Alias":"loginscreen","Description":"`LoginScreen` adds login, registration and reset password features to your iOS and Android applications.\n\nTo use `LoginScreen` you must implement `ICredentialsProvider` interface:\n\n```csharp\nusing LoginScreen;\n\npublic class CredentialsProvider : ICredentialsProvider\n{\n\t// Constructor without parameters is required\n\n\tpublic bool NeedLoginAfterRegistration {\n\t\tget {\n\t\t\t// If you want your user to login after he/she has been registered\n\t\t\treturn true;\n\n\t\t\t// Otherwise you can:\n\t\t\t// return false;\n\t\t}\n\t}\n\n\tpublic void Login (string userName, string password, Action successCallback, Action\u003cLoginScreenFaultDetails\u003e failCallback)\n\t{\n\t\t// Do some operations to login user\n\n\t\t// If login was successfully completed\n\t\tsuccessCallback();\n\n\t\t// Otherwise\n\t\t// failCallback(new LoginScreenFaultDetails {\n\t\t// \tCommonErrorMessage = \"Some error message relative to whole form\",\n\t\t// \tUserNameErrorMessage = \"Some error message relative to user name form field\",\n\t\t// \tPasswordErrorMessage = \"Some error message relative to password form field\"\n\t\t// });\n\t}\n\n\tpublic void Register (string email, string userName, string password, Action successCallback, Action\u003cLoginScreenFaultDetails\u003e failCallback)\n\t{\n\t\t// Do some operations to register user\n\n\t\t// If registration was successfully completed\n\t\tsuccessCallback();\n\n\t\t// Otherwise\n\t\t// failCallback(new LoginScreenFaultDetails {\n\t\t// \tCommonErrorMessage = \"Some error message relative to whole form\",\n\t\t// \tEmailErrorMessage = \"Some error message relative to e-mail form field\",\n\t\t// \tUserNameErrorMessage = \"Some error message relative to user name form field\",\n\t\t// \tPasswordErrorMessage = \"Some error message relative to password form field\"\n\t\t// });\n\t}\n\n\tpublic void ResetPassword (string email, Action successCallback, Action\u003cLoginScreenFaultDetails\u003e failCallback)\n\t{\n\t\t// Do some operations to reset user\u0027s password\n\n\t\t// If password was successfully reset\n\t\tsuccessCallback();\n\n\t\t// Otherwise\n\t\t// failCallback(new LoginScreenFaultDetails {\n\t\t// \tCommonErrorMessage = \"Some error message relative to whole form\",\n\t\t// \tEmailErrorMessage = \"Some error message relative to e-mail form field\"\n\t\t// });\n\t}\n\n\tpublic bool ShowPasswordResetLink {\n\t\tget {\n\t\t\t// If you want your login screen to have a forgot password button\n\t\t\treturn true;\n\n\t\t\t// Otherwise you can:\n\t\t\t// return false;\n\t\t}\n\t}\n\t\n\tpublic bool ShowRegistration {\n\t\tget {\n\t\t\t// If you want your login screen to have a register new user button\n\t\t\treturn true;\n\n\t\t\t// Otherwise you can:\n\t\t\t// return false;\n\t\t}\n\t}\n}\n```\nYou must call one of callbacks; otherwise login screen will never hide.\n\n###You can add `LoginScreen` to your app as follows:\n- adding `LoginScreen` to your iOS app:\n\n```csharp\nLoginScreen.LoginScreenControl\u003cCredentialsProvider\u003e.Activate (viewController);\n```\n\n- adding `LoginScreen` to your Android app:\n\n```csharp\nLoginScreen.LoginScreenControl\u003cCredentialsProvider\u003e.Activate (context);\n```\n\n*Screenshots assembled with [PlaceIt](http://placeit.breezi.com).*\n","Version":"1.3","Summary":"Allows you to add login, registration and reset password features to your iOS and Android applications.","QuickStart":"`LoginScreen` adds login, registration and reset password features to your iOS and Android applications.\n\n### Examples\n#### Implementing credential operation\u0027s logic:\nTo implement your credential operation\u0027s logic you need to implement interface `ICredentialsProvider`:\n\n```csharp\nusing LoginScreen;\n\npublic class CredentialsProvider : ICredentialsProvider\n{\n\t// Constructor without parameters is required\n\n\tpublic bool NeedLoginAfterRegistration {\n\t\tget {\n\t\t\t// If you want your user to login after he/she has been registered\n\t\t\treturn true;\n\n\t\t\t// Otherwise you can:\n\t\t\t// return false;\n\t\t}\n\t}\n\n\tpublic void Login (string userName, string password, Action successCallback, Action\u003cLoginScreenFaultDetails\u003e failCallback)\n\t{\n\t\t// Do some operations to login user\n\n\t\t// If login was successfully completed\n\t\tsuccessCallback();\n\t\t\n\t\t// Otherwise\n\t\t// failCallback(new LoginScreenFaultDetails {\n\t\t// \tCommonErrorMessage = \"Some error message relative to whole form\",\n\t\t// \tUserNameErrorMessage = \"Some error message relative to user name form field\",\n\t\t// \tPasswordErrorMessage = \"Some error message relative to password form field\"\n\t\t// });\n\t}\n\n\tpublic void Register (string email, string userName, string password, Action successCallback, Action\u003cLoginScreenFaultDetails\u003e failCallback)\n\t{\n\t\t// Do some operations to register user\n\n\t\t// If registration was successfully completed\n\t\tsuccessCallback();\n\t\t\n\t\t// Otherwise\n\t\t// failCallback(new LoginScreenFaultDetails {\n\t\t// \tCommonErrorMessage = \"Some error message relative to whole form\",\n\t\t// \tEmailErrorMessage = \"Some error message relative to e-mail form field\",\n\t\t// \tUserNameErrorMessage = \"Some error message relative to user name form field\",\n\t\t// \tPasswordErrorMessage = \"Some error message relative to password form field\"\n\t\t// });\n\t}\n\n\tpublic void ResetPassword (string email, Action successCallback, Action\u003cLoginScreenFaultDetails\u003e failCallback)\n\t{\n\t\t// Do some operations to reset user\u0027s password\n\n\t\t// If password was successfully reset\n\t\tsuccessCallback();\n\t\t\n\t\t// Otherwise\n\t\t// failCallback(new LoginScreenFaultDetails {\n\t\t// \tCommonErrorMessage = \"Some error message relative to whole form\",\n\t\t// \tEmailErrorMessage = \"Some error message relative to e-mail form field\"\n\t\t// });\n\t}\n\n\tpublic bool ShowPasswordResetLink {\n\t\tget {\n\t\t\t// If you want your login screen to have a forgot password button\n\t\t\treturn true;\n\n\t\t\t// Otherwise you can:\n\t\t\t// return false;\n\t\t}\n\t}\n\t\n\tpublic bool ShowRegistration {\n\t\tget {\n\t\t\t// If you want your login screen to have a register new user button\n\t\t\treturn true;\n\n\t\t\t// Otherwise you can:\n\t\t\t// return false;\n\t\t}\n\t}\n}\n```\n\nYou must call one of callbacks; otherwise login screen will never hide.\n\n#### Adding `LoginScreen` to your app:\n- iOS app\n\n```csharp\nusing LoginScreen;\n\nprivate bool needLogin = true;\n\npublic override void ViewDidAppear (bool animated)\n{\n\tbase.ViewDidAppear (animated);\n\n\tif (needLogin) {\n\t\tLoginScreenControl\u003cCredentialsProvider\u003e.Activate (this);\n\t\tneedLogin = false;\n\t}\n}\n```\n\n- Android app\n\n```csharp\nusing LoginScreen;\n\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\t// ...\n\n\tLoginScreenControl\u003cCredentialsProvider\u003e.Activate (this);\n}\n```\n\n#### Localization\n\nTo localize `LoginScreen` or change strings from default you need to implement `ILoginScreenMessages` interface:\n\n```csharp\nusing LoginScreen;\n\npublic class LoginScreenMessages : ILoginScreenMessages\n{\n\t// Constructor without parameters is required\n\t\n\t// There must be placed properties that returns some sctrings to use it to display\n}\n```\n\nAnd then, you neet to use `LoginScreenControl\u003cCredentialsProvider, LoginScreenMessages\u003e` instead of `LoginScreenControl\u003cCredentialsProvider\u003e`.\n\n*Screenshots assembled with [PlaceIt](http://placeit.breezi.com).*\n","Hash":"4cab316b48a112a7384d3e1f86c6173e","TargetPlatforms":["ios","android"],"TrialHash":null}