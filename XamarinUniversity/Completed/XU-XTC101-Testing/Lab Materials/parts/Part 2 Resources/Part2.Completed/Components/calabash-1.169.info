{"Name":"Calabash","Id":759,"Alias":"calabash","Description":"Calabash enables you to write and execute automated acceptance tests of mobile apps. It provides APIs that are specialized to interactive with native iOS and Android apps running on touch screen devices. When combined with Xamarin Test Cloud, you can automatically test your app on hundreds of mobile devices.\n\nCalabash consists of libraries that enable test-code to programmatically interact with native and hybrid apps. The interaction consists of a number of end-user actions. Each action can be one of:\n\n**Gestures**  \n\n - Touches or gestures (e.g., tap, swipe and rotate).\n\n**Assertions**  \n\n - For example: there should be a \"Login\" button or the web view should contain an \"h1\" tag with the text \"Hello\".\n\n**Screenshots**  \n\n - Screendump the current view on the current device model\n\n### So Easy ###\n\nIt couldn\u0027t be any easier to incorporate the Calabash server into your application. All it takes is just one line of code:\n\n```csharp\nXamarin.Calabash.Start();\n```\n\nWhen your app runs, it now is listening for commands issued by a test runner, such as the one used by the [Xamarin Test Cloud](http://xamarin.com/test-cloud).\n\n### Note ###\n\nThis component currently only provides the Calabash server library, which is required to run custom tests using either the [Xamarin Test Cloud](http://xamarin.com/test-cloud) or Cucumber. For information on installing and configuring Calabash to work with a local Cucumber runner, check out [the detailed guide](https://github.com/calabash/calabash-ios/wiki/01-Getting-started-guide) in the Calabash repository on github.\n","Version":"1.169","Summary":"Run automated acceptance tests of your iOS and Android apps.","QuickStart":"Calabash consists of libraries that enable test-code to programmatically interact with native and hybrid apps. \n\n###So Easy###\n\nIt couldn\u0027t be any easier to incorporate the Calabash server into your application. All it takes is just one line of code, which is added to your `AppDelegate`\u0027s `FinishedLaunching` method:\n\n```csharp\nXamarin.Calabash.Start();\n```\n\nOnce up and running, Calabash advertises itself using the [Bonjour protocol](https://developer.apple.com/bonjour/). This lets the client discover, connect, and begin testing your app.\n\nIn order for the Calabash server to pull off its magic, it has to use some of Apple\u0027s private APIs. That means you don\u0027t want to ship your application with Calabash bits still in it.\n\nTo make your life easy, we leverage our sophisticated linker which removes code that isn\u0027t needed. Just wrap your call to `Start` Calabash in an `#if` directive:\n\n```csharp\n#if DEBUG\nXamarin.Calabash.Start();\n#endif\n```\n\nThis will ensure that your release build will not include any of the Calabash bits.","Hash":"de539204b514de331c499fb0b0642b40","TargetPlatforms":["ios"],"TrialHash":null}