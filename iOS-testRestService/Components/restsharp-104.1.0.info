{"Name":"RestSharp","Id":163,"Alias":"restsharp","Description":"RestSharp makes it easy to consume the wide array of services on the web over HTTP, like: Amazon, Facebook, or even Twitter...\n\n## Features\n\n* Automatic XML and JSON deserialization\n* Supports custom serialization and deserialization via ISerializer and IDeserializer\n* Fuzzy element name matching (\u0027product_id\u0027 in XML/JSON will match C# property named \u0027ProductId\u0027)\n* Automatic detection of type of content returned\n* GET, POST, PUT, HEAD, OPTIONS, DELETE supported\n* Other non-standard HTTP methods also supported\n* oAuth 1, oAuth 2, Basic, NTLM and Parameter-based Authenticators included\n* Supports custom authentication schemes via IAuthenticator\n* Multi-part form/file uploads\n* T4 Helper to generate C# classes from an XML document\n\n## Example\n\n```csharp\nusing RestSharp;\n// ...\n\nvar client = new RestClient (\"http://rxnav.nlm.nih.gov/REST/RxTerms/rxcui/\");\n\nvar request = new RestRequest (String.Format (\"{0}/allinfo\", \"198440\"));\nclient.ExecuteAsync (request, response =\u003e {\n\tConsole.WriteLine (response.Content);\n});\n```","Version":"104.1.0","Summary":"A simple REST client for consuming HTTP APIs.","QuickStart":"## Example\n\n```csharp\nusing RestSharp;\n// ...\n\nvar client = new RestClient (\"http://rxnav.nlm.nih.gov/REST/RxTerms/rxcui/\");\n\nvar request = new RestRequest (String.Format (\"{0}/allinfo\", \"198440\"));\nclient.ExecuteAsync (request, response =\u003e {\n\tConsole.WriteLine (response.Content);\n});\n```\n\n## Features\n```csharp\nvar client = new RestClient(\"http://example.com\");\n// client.Authenticator = new HttpBasicAuthenticator(username, password);\n\nvar request = new RestRequest(\"resource/{id}\", Method.POST);\nrequest.AddParameter(\"name\", \"value\"); // adds to POST or URL querystring based on Method\nrequest.AddUrlSegment(\"id\", 123); // replaces matching token in request.Resource\n\n// add parameters for all properties on an object\nrequest.AddObject(object);\n\n// or just whitelisted properties\nrequest.AddObject(object, \"PersonId\", \"Name\", ...);\n\n// easily add HTTP Headers\nrequest.AddHeader(\"header\", \"value\");\n\n// add files to upload (works with compatible verbs)\nrequest.AddFile(path);\n\n// execute the request\nRestResponse response = client.Execute(request);\nvar content = response.Content; // raw content as string\n\n// or automatically deserialize result\n// return content type is sniffed but can be explicitly set via RestClient.AddHandler();\nRestResponse\u003cPerson\u003e response2 = client.Execute\u003cPerson\u003e(request);\nvar name = response2.Data.Name;\n\n// or download and save file to disk\nclient.DownloadData(request).SaveAs(path);\n\n// easy async support\nclient.ExecuteAsync(request, response =\u003e {\n    Console.WriteLine(response.Content);\n});\n\n// async with deserialization\nvar asyncHandle = client.ExecuteAsync\u003cPerson\u003e(request, response =\u003e {\n    Console.WriteLine(response.Data.Name);\n});\n\n// abort the request on demand\nasyncHandle.Abort();\n```\n\n## Documentation\n\n- Wiki: [https://github.com/restsharp/RestSharp/wiki](https://github.com/restsharp/RestSharp/wiki)\n\n## Contact / Discuss\n\n- Please use the [Google Group](http://groups.google.com/group/RestSharp) for feature requests and troubleshooting usage.\n- Twitter: [@RestSharp](http://twitter.com/restsharp)","Hash":"042cc650db3eba8c1575fb9622ef6f71","TargetPlatforms":["ios","android"],"TrialHash":null}