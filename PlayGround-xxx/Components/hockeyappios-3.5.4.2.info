{"Name":"HockeyApp for iOS","Id":694,"Alias":"hockeyappios","Description":"HockeyApp a platform to collect live crash reports, get feedback from your users, distribute your betas, recruit new testers, and analyze your test coverage.\n\n## Features\n \n - **Crash Reports** - Reliable and complete crash reporting for beta and App Store versions, providing full server-side symbolication with class names, methods, line numbers, and automatic grouping of similar crash reports.\n - **Feedback** - Allows you to communicate with your customers. Users can create a support request, post an idea, or discuss a problem right from within the app.\n - **Distribution** - Upload your beta versions to HockeyApp and distribute them to your beta testers. Integrate our open-source SDK and your app will automatically be able to detect updates and offer the updates right within the app.\n - **Analytics** - Advanced metrics to get a better overview of the testing for your app. See which devices were tested, which testers used the app for how long, and which language was tested.\n \n\n## Learn More\nLearn more about HockeyApp by visiting http://hockeyapp.net","Version":"3.5.4.2","Summary":"HockeyApp is a platform to collect live crash reports, get feedback from your users, distribute your betas, recruit new testers, and analyze your test coverage.","QuickStart":"## Adding HockeyApp to your iOS app\n\nIn your `AppDelegate.cs`\u0027s your `FinishedLaunching` override should look something like this: (be sure to replace \"\u0026lt;YOUR-HOCKEYAPP-APPID\u0026gt;\" with your own):\n\n```\npublic override bool FinishedLaunching (UIApplication app, NSDictionary options)\n{\n\t//We MUST wrap our setup in this block to wire up\n\t// Mono\u0027s SIGSEGV and SIGBUS signals\n\tHockeyApp.Setup.EnableCustomCrashReporting (() =\u003e {\n\n\t\t//Get the shared instance\n\t\tvar manager = BITHockeyManager.SharedHockeyManager;\n\n\t\t//Configure it to use our APP_ID\n\t\tmanager.Configure (\"YOUR-HOCKEYAPP-APPID\");\n\n\t\t//Start the manager\n\t\tmanager.StartManager ();\n\n\t\t//Authenticate (there are other authentication options)\n\t\tmanager.Authenticator.AuthenticateInstallation ();\n\t\t\n\t\t//Rethrow any unhandled .NET exceptions as native iOS \n\t\t// exceptions so the stack traces appear nicely in HockeyApp\n\t\tAppDomain.CurrentDomain.UnhandledException += (sender, e) =\u003e \n\t\t\tSetup.ThrowExceptionAsNative(e.ExceptionObject);\n\n\t\tTaskScheduler.UnobservedTaskException += (sender, e) =\u003e \n\t\t\tSetup.ThrowExceptionAsNative(e.Exception);\n\t});\n\n\t//The rest of your code here\n\t// ...\n}\n```\n\nNote that you must wrap the code in your FinishedLaunching method in the `HockeyApp.Setup.EnableCustomCrashReporting` block so that we can temporarily redirect mono\u0027s SIGSEGV and SIGBUS handlers.  This is important for Crash Reporting.\n\nAlso note that you can wire up unhandled exception and unobserved task exception events and use the `Setup.ThrowExceptionAsNative(...)` to re-throw the exception as a native iOS exception.  This will ensure that you see a stack trace in your HockeyApp dashboard.\n\nAfter your initial setup is complete, you can access the `BITHockeyManager.SharedHockeyManager` share instance everywhere else in your app.  For example, you can show existing feedback or show a form for submitting new feedback to the user:\n\n```\nBITHockeyManager.FeedbackManager.ShowFeedbackListView();\n\nBITHockeyManager.FeedbackManager.ShowFeedbackComposeView();\n```\n\n","Hash":"8215cc875255a2118d07370120677cf7","TargetPlatforms":["ios"],"TrialHash":null}