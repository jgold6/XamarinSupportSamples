{"Name":"SignalR","Id":894,"Alias":"signalr","Description":"# ASP.NET SignalR\nASP.NET SignalR is a library for developers that simplifies the process of adding real-time web functionality to applications. Real-time web functionality is the ability to have server code push content to connected clients instantly as it becomes available, rather than having the server wait for a client to request new data.\n\nASP.NET SignalR provides a simple API for creating server-to-client remote procedure calls (RPC) that call functions in clients from server-side .NET code.  It also includes API for connection management (for instance, connect and disconnect events), and grouping connections.\n\n\n\n## ASP.NET SignalR Xamarin Client\nThe ASP.NET SignalR Client not only works in JavaScript and browsers, but also .NET applications such as Xamarin.Android, Xamarin.iOS, Windows Phone and Windows Store.  The .NET client uses the System.Net.Http namespace to connect to a SignalR server.\n\nWith the ASP.NET SignalR .NET Client, you can connect to Hubs, Invoke commands, and listen for commands locally which are invoked by the server.  You can also listen to events in the .NET client pertaining to connection state and errors.\n\n\n\n## Quick Usage\nSetting up a connection and proxy to an ASP.NET SignalR Hub is easy.  You establish the connection, generate a hub proxy, and then define handlers for hub methods the server can call on your client.  After starting the hub connection, you can then invoke methods on the server as needed:\n\n```\n// Connect to the server\nvar hubConnection = new HubConnection(\"http://server.com/\");\n\n// Create a proxy to the \u0027ChatHub\u0027 SignalR Hub\nvar chatHubProxy = hubConnection.CreateHubProxy(\"ChatHub\");\n\n// Wire up a handler for the \u0027UpdateChatMessage\u0027 for the server\n// to be called on our client\nchatHubProxy.On\u003cstring\u003e(\"UpdateChatMessage\", message =\u003e \n\ttext.Text += string.Format(\"Received Msg: {0}\\r\\n\", message));\n\n// Start the connection\nawait hubConnection.Start();\n\n// Invoke the \u0027UpdateNick\u0027 method on the server\nawait chatHubProxy.Invoke(\"UpdateNick\", \"JohnDoe\");\n```\n\n\n## Learn More\nYou can read more about ASP.NET SignalR by visiting http://www.asp.net/signalr\n","Version":"2.1.1","Summary":"Incredibly simple real-time web for .NET.","QuickStart":"\n## Running the Sample\nIf you would like to run the sample you will need to setup the ASP.NET SignalR Demo project on your own server.  This project can be found in the official SignalR GitHub repository: [GitHub SignalR: SignalR/Samples/Microsoft.AspNet.SignalR.Samples](https://github.com/SignalR/SignalR/tree/master/samples/Microsoft.AspNet.SignalR.Samples).\n\nOnce you\u0027ve got the ASP.NET project running, you should change the samples to connect to the web address of your demo ASP.NET application.  \n\n\n## Getting Started\nSetting up a connection and proxy to an ASP.NET SignalR Hub is easy.  You establish the connection, generate a hub proxy, and then define handlers for hub methods the server can call on your client.  After starting the hub connection, you can then invoke methods on the server as needed:\n\n```\n// Connect to the server\nvar hubConnection = new HubConnection(\"http://server.com/\");\n\n// Create a proxy to the \u0027ChatHub\u0027 SignalR Hub\nvar chatHubProxy = hubConnection.CreateHubProxy(\"ChatHub\");\n\n// Wire up a handler for the \u0027UpdateChatMessage\u0027 for the server\n// to be called on our client\nchatHubProxy.On\u003cstring\u003e(\"UpdateChatMessage\", message =\u003e \n\ttext.Text += string.Format(\"Received Msg: {0}\\r\\n\", message));\n\n// Start the connection\nawait hubConnection.Start();\n\n// Invoke the \u0027UpdateNick\u0027 method on the server\nawait chatHubProxy.Invoke(\"UpdateNick\", \"JohnDoe\");\n```\n\n\n## Complex Object Types\nYou can also use more complex object types when you expose client method handlers and invoke methods on the server.  Internally, the ASP.NET SignalR .NET Client uses Newtonsoft.Json to serialize and deserialize objects for transport.  The example from above could become something like this:\n\n```\nchatHubProxy.On\u003cChatMessage\u003e(\"UpdateChatMessage\", message =\u003e \n\ttext.Text += string.Format(\"{0}: {1} \\r\\n\", message.User, message.Text));\n\nchatHubProxy.Invoke(\"SendMessage\", new ChatMessage() { User = \"JohnDoe\", Text = \"Hello!\" });\n```\n\n\n## Connection Lifetime Events\nSignalR provides the following connection lifetime events that you can handle:\n\n - **Received**: Raised when any data is received on the connection.  Provides the received data.\n - **ConnectionSlow**: Raised when the client detects a slow or frequently dropping connection.\n - **Reconnecting**: Raised when the underlying transport begins reconnecting.\n - **Reconnected**: Raised when the underlying transport has reconnected.\n - **StateChanged**: Raised when the connection state changes. Provides the old state and the new state.\n - **Closed**: Raised when the connection has disconnected.\n\n\nFor example, if you want to display warning messages for errors that are not fatal but cause intermittent connection problems, such as slowness or frequent dropping of the connection, handle the ConnectionSlow event.\n\n```\nhubConnection.ConnectionSlow += () =\u003e text.Text += \"Connection problems.\\r\\n\";\n```\n\n\n\n## How to handle errors\nIf you don\u0027t explicitly enable detailed error messages on the server, the exception object that SignalR returns after an error contains minimal information about the error. For example, if a call to `SendMessage` fails, the error message in the error object contains *\"There was an error invoking Hub method \u0027ChatHub.SendMessage\u0027.\"* Sending detailed error messages to clients in production is not recommended for security reasons, but can be enabled by setting the `HubConfiguration.EnabledDetailedErrors` property on the server.\n\nTo handle errors that SignalR raises, you can add a handler for the Error event on the connection object.\n\n```\nhubConnection.Error += ex =\u003e text.Text += string.Format(\"SignalR error: {0}\\r\\n\", ex.Message);\n```\n\nTo handle errors from method invocations, wrap the code in a try-catch block. \n\n```\ntry\n{\n    var users = await chatHubProxy.Invoke\u003cIEnumerable\u003cChatUser\u003e\u003e(\"GetAllUsers\");\n    foreach (var user in users)\n        text.Text += string.Format(\"{0} : {1}\", user.Name, user.Status);\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(\"Error invoking GetAllUsers: {0}\", ex.Message);\n}\n```\n\n## Learn More\nYou can read more about ASP.NET SignalR by visiting http://www.asp.net/signalr\n","Hash":"eb921788eba32af54bc526a7f3699ab4","TargetPlatforms":["ios","android","winphone-7.0","winphone-7.1","mobile"],"TrialHash":null}